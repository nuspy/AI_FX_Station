[build-system]
requires = ["setuptools>=69", "wheel", "joblib"]
build-backend = "setuptools.build_meta"

[project]
name = "forex-diffusion"
version = "0.1.0"
description = "Models & training pipeline per ForexMagic"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "ForexMagic", email = "dev@forexmagic.local" }]
license = { text = "Proprietary" }

dependencies = [
  # Qt/GUI Dependencies
  "PySide6>=6.5.0",
  "PySide6-Essentials>=6.5.0",
  "PySide6-Addons>=6.5.0",

  # Core Data Processing
  "numpy>=1.24",
  "pandas>=2.0",
  "scikit-learn>=1.3",
  "joblib>=1.3",
  "xgboost>=3.0.0",
  "lightgbm>=4.0.0",

  # Configuration & Utilities
  "pyyaml>=6.0,<7.0",
  "pytz>=2023.3,<2026.0",
  "loguru>=0.7.0,<1.0",
  "psutil>=5.9.0,<7.0",

  # Trading & Analysis Libraries
  "bta-lib>=1.0.0",
  "finplot>=1.9.0",
  "yfinance>=0.2.0",
  "exchange_calendars>=4.0.0",
  # VectorBT Pro - installed from wheel file in VectorBt_PRO/
  # pip install ./VectorBt_PRO/vectorbtpro-2025.7.27-py3-none-any.whl

  # Database & Caching
  "duckdb>=0.9.0",
  "diskcache>=5.6.0",

  # Async & Performance
  "asyncio-throttle>=1.0.2",

  # Phase 3 Advanced Features Dependencies
  "tensorflow>=2.13.0,<2.21",
  # PyTorch with CUDA 12.x support (install with: pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121)
  # Note: Remove CPU-only versions first: pip uninstall torch torchvision torchaudio
  "scipy>=1.10.0,<2.0",

  # Optimization & Backtesting Libraries
  "pymoo>=0.6.0",  # NSGA-II multi-objective optimization
  "autograd>=1.4",  # Required by pymoo
  "backtesting>=0.3.3",  # kernc/backtesting.py strategy backtesting
  "hmmlearn>=0.3.0",  # Hidden Markov Models for regime detection
  # cTrader Open API Integration
  # NOTE: ctrader-open-api declares protobuf==3.20.1 but WORKS FINE with protobuf 6.x
  # To avoid dependency resolution issues, install ctrader-open-api manually with --no-deps:
  #   pip install "protobuf>=6.0"
  #   pip install "ctrader-open-api>=0.9.2" --no-deps
  # Then install the rest: pip install -e .
  # The dependencies below ensure Twisted and other cTrader deps are present
  "twisted>=24.3.0,<25.0",  # Async framework for cTrader API
  "twisted-iocpsupport>=1.0.2,<2.0; sys_platform == 'win32'",  # Windows IOCP support
  "inputimeout>=1.0.4,<2.0",  # For cTrader console input timeout
  "pyOpenSSL>=24.1.0,<25.0",  # SSL support for cTrader API
  "requests>=2.31.0,<3.0",  # HTTP requests for cTrader API
  "service-identity>=21.1.0,<25.0",  # For cTrader API
  "automat>=0.8.0,<26.0",  # State machine for Twisted
  "constantly>=15.1,<24.0",  # Symbolic constants for Twisted
  "hyperlink>=17.1.1,<22.0",  # Pure-Python URL handling for Twisted
  "incremental>=22.10.0,<25.0",  # Versioning library for Twisted
  # Multi-Provider Integration (Phase 1-4)
  # ctrader-open-api - protobuf version conflict resolved:
  # ctrader-open-api declares protobuf==3.20.1 but works fine with protobuf>=3.20.1
  # TensorFlow 2.20+ requires protobuf>=3.20.1 and works with 6.x
  # Both packages work with protobuf 6.x, so we don't pin it here (let TensorFlow manage it)
  # "twisted>=23.0.0",           # Async framework (also for cTrader if installed)
  # "protobuf>=5.28.0",         # Removed - let TensorFlow manage protobuf version (no conflict)
  "keyring>=24.0.0,<26.0",          # Secure credential storage
  "cryptography>=41.0.0,<43.0",     # Fernet encryption (compatible with pyOpenSSL 24.1)
  "httpx>=0.25.0,<1.0",            # Async HTTP for OAuth

  # NVIDIA Optimization Stack (Phase 1)
  # PyTorch Lightning already included above
  "pytorch-lightning>=2.0.0,<3.0",  # Training framework
  "pynvml>=11.5.0,<12.0",           # NVIDIA Management Library for GPU detection
  # xFormers - install with version matching (OPTIONAL but RECOMMENDED):
  # pip install xformers>=0.0.30  # For PyTorch 2.5.x â†’ use xformers==0.0.30
  #                               # For PyTorch 2.7.x â†’ use xformers==0.0.31.post1
  # Auto-install with: python install_nvidia_stack.py --xformers (detects PyTorch version)
  # Or install manually: pip install -e ".[nvidia]" (includes xformers)
  # APEX (NVIDIA fused optimizers) - install separately:
  # pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings "--build-option=--cpp_ext" --config-settings "--build-option=--cuda_ext" git+https://github.com/NVIDIA/apex.git
  # Flash Attention 2 - install separately (requires Ampere+ GPU):
  # pip install flash-attn --no-build-isolation
  # NVIDIA DALI - install separately (optional, Linux only):
  # pip install --extra-index-url https://pypi.nvidia.com --upgrade nvidia-dali-cuda120
  # Note: DALI is not available on Windows - this is normal and not required

  # SQLAlchemy for optimization database
  "sqlalchemy>=2.0.0,<3.0",        # ORM for optimization results database
  "alembic>=1.12.0,<2.0",          # Database migrations (already used in project)

  # S4D/SSSD Dependencies (Phase 2)
  "einops>=0.6.0,<1.0",            # Tensor rearrangement for S4 layers
  "opt-einsum>=3.3.0,<4.0",        # Optimized Einstein summation
  "torchdiffeq>=0.2.0,<1.0",       # ODE solvers for diffusion models
  "hydra-core>=1.3.0,<2.0",        # Configuration management for SSSD
  "omegaconf>=2.3.0,<3.0",         # Configuration validation and merging

  # Advanced ML & Optimization (SSSD)
  "optuna>=3.4.0,<4.0",            # Bayesian hyperparameter optimization
  "deap>=1.4.0,<2.0",              # Genetic algorithm framework
  # alibi-detect - REMOVED (conflicts with dill version)
  "river>=0.18.0,<1.0",            # Online learning utilities
  # evidently - REMOVED (conflicts with cryptography version)
  
  # Reinforcement Learning
  "gymnasium>=0.29.0,<1.0",        # Maintained replacement for gym (NumPy 2.0 compatible)
  # Note: Uninstall old gym first: pip uninstall gym gym-notices

  # Experiment Tracking (Optional for SSSD)
  "wandb>=0.15.0,<1.0",            # Weights & Biases experiment tracking
  "tensorboard>=2.14.0,<3.0",      # TensorBoard logging

  # LDM4TS (Vision-Enhanced Latent Diffusion for Time Series) - Phase 3
  "diffusers>=0.25.0,<1.0",        # Hugging Face diffusion models (Stable Diffusion VAE)
  "accelerate>=0.25.0,<1.0",       # Efficient inference & training
  "safetensors>=0.4.0,<1.0",       # Fast & safe model serialization

  # Enhanced Trading System Dependencies (New Trading Specs)
  "transformers>=4.30.0,<5.0",     # Transformer models for sequence prediction (also for LDM4TS CLIP)
  "tokenizers>=0.13.0,<1.0",       # Fast tokenization for transformers
  "sentencepiece>=0.2.0,<1.0",     # Tokenizer (>=0.2.0 has pre-built wheels for Windows)
  "statsmodels>=0.14.0,<1.0",      # Statistical models and tests (cointegration, etc.)
  "arch>=7.0,<8.0",                # ARCH/GARCH models for volatility (required by riskfolio-lib)
  "ta-lib>=0.4.28,<1.0",           # Technical Analysis Library (optional, requires separate install)

  # Visualization & PDF Generation
  "cutecharts>=1.0.0",             # Cute charts for visualization
  "reportlab>=4.0.0,<5.0",         # PDF generation
  "pillow>=10.0.0",                # Image processing for charts

  # Portfolio Optimization (Riskfolio-Lib)
  "riskfolio-lib>=7.0,<8.0",       # Portfolio optimization and quantitative asset allocation
  "cvxpy>=1.3.0,<2.0",             # Convex optimization (required by riskfolio-lib)
  "clarabel>=0.5.0,<1.0",          # Solver for cvxpy
  "xlsxwriter>=3.0.0,<4.0",        # Excel export for portfolio reports
]

[project.scripts]
# Training scripts
fx-train-sklearn = "forex_diffusion.training.train_sklearn:main"
fx-train-lightning = "forex_diffusion.training.train:main"

# Optional dependency installation scripts
# Run with: pip run <script-name>
[project.optional-dependencies]
# NVIDIA GPU acceleration stack (requires CUDA 12.x)
# Install with: pip install -e ".[nvidia]"
# Or use automated installer: python install_nvidia_stack.py --all
nvidia = [
  "nvidia-ml-py>=12.0.0",  # NVIDIA ML Python bindings for GPU monitoring
  "xformers>=0.0.30",      # Memory efficient transformers (version depends on PyTorch version)
                           # PyTorch 2.5.x â†’ xformers==0.0.30
                           # PyTorch 2.7.x â†’ xformers==0.0.31.post1
                           # Use install_nvidia_stack.py --xformers for auto-versioning
  # NOTE: The following require compilation and are installed via install_nvidia_stack.py
  # APEX - Install separately (requires C++ compiler):
  #   python install_nvidia_stack.py --apex
  #   Manual: pip install -v --no-cache-dir --no-build-isolation git+https://github.com/NVIDIA/apex.git
  # Flash Attention 2 - Install separately (requires Ampere+ GPU, compute capability >= 8.0):
  #   python install_nvidia_stack.py --flash-attn
  #   Manual: pip install flash-attn --no-build-isolation
  # NVIDIA DALI - Install via WSL on Windows (Linux only package):
  #   wsl python install_nvidia_stack.py --dali
  #   Manual (Linux/WSL): pip install --extra-index-url https://pypi.nvidia.com nvidia-dali-cuda120
]

# Development and testing dependencies
# Install with: pip install -e ".[dev]"
dev = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-asyncio>=0.21.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "autoflake>=2.3.0",  # Remove unused imports
]

# Full NVIDIA stack (nvidia + compiled components via installer)
# Install with: pip install -e ".[nvidia-full]" && python install_nvidia_stack.py --all
# This installs: nvidia-ml-py, xformers, APEX, Flash Attention, DALI (WSL)
nvidia-full = [
  "nvidia-ml-py>=12.0.0",
  "xformers>=0.0.30",
  # After pip install, run: python install_nvidia_stack.py --all
  # This will compile and install: APEX, Flash Attention 2, DALI (WSL)
]

# Install everything (recommended for full development setup)
# Install with: pip install -e ".[all]"
all = [
  "nvidia-ml-py>=12.0.0",
  "xformers>=0.0.30",
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["forex_diffusion*"]

[tool.setuptools.package-data]
forex_diffusion = ["py.typed", "data/**/*"]

